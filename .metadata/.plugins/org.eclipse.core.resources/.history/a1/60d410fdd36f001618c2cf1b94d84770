package class25;

public class longCommonSubstring {
    /*
     * 2D table
     * 
     * 
     * dp[i][j]
     * 
     * longest common substring between s and t
     * 
     * the common substring is in [0 -- i] for string s
     * the common substring is in [0 -- j] for string t
     * 
     */
    
    public String longestCommon(String s, String t) {
        // Write your solution here.
        int[][] dp = new int[s.length() + 1][t.length() + 1];
        int max = 0;
        int posX = 0, posY = 0;
        
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 1; j <= t.length(); j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    if(max < dp[i][j]){ 
                        max = dp[i][j];
                        posX = i;
                        posY = j;
                        System.out.println(posX);
                    }
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (posX > 0 && posY > 0 && s.charAt(posX) == t.charAt(posY)) {
            System.out.println("h");
            sb.append(s.charAt(posX--));
            posY--;
        }
        return sb.reverse().toString();
    }
}
